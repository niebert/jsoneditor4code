vJSCC_DB['ClassList']['LinkParam'] = {
    "sClassType": "Blue",
    "tClassname": "LinkParam",
    "tSuperClassname": "",
    "JSCC_mod_date": "2017/11/14 11:20:59",
    "tAuthor": "Engelbert Niehaus",
    "tEMail": "niehaus@uni-landau.de",
    "tAttributes": "size = 0\naVars = {}\naLink = \"\"",
    "tMethods": "init(pDoc:Document)\nparseURL(pLink:String):String\ngetURL(pVarHash:Hash):String\nsetValue(pVar:String,pValue:String)\ngetValue(pVar:String):String\ndeleteValue(pVar:String)\ngetLink4URL():String\ngetParam4URL():String\ndecodeParam(pParam:String):String\nencodeParam(pParam:String)\ngetTableHTML():String\ngetEditTableHTML(pPrefixID:String):String\ncalcSize()\nencodeHTML(pValue:String,pWrapCode:Boolean):String\nexists(pVar:String):Boolean\nparam2DOM(pLinkID,pDOMID)",
    "sAttribList": "size",
    "tAttribName": "size",
    "tAttribType": "String",
    "tAttribComment": "Counts the Number of Parameter",
    "tAttribDefault": "0",
    "sAttribTypeList": "Integer",
    "tMethodHeader": "getParam4URL():String",
    "tMethodComment": "get the parameter string for the URL starting with ? if aVars contains variables",
    "sMethodList": "getParam4URL",
    "tMethodCode": "  var vHash = this.aVars || {};\n  var vOut = \"\";\n  var vSep = \"?\";\n  for (var iID in vHash) {\n    if (vHash.hasOwnProperty(iID)) {\n      vOut = vSep + this.encodeParam(iID) + \"=\" + this.encodeParam(vHash[iID]);\n      vSep = \"&\";\n    };\n  };\n  return vOut;\n",
    "tLoopObject": "vMyHash",
    "tLoopMethod": ".init()",
    "AttribDefault": {
        "size": "0",
        "aVars": "{}",
        "aLink": "\"\""
    },
    "AttribType": {
        "size": "Integer",
        "aVars": "Hash",
        "aLink": "String"
    },
    "AttribComment": {
        "size": "Counts the Number of Parameter",
        "aVars": "Attribute: 'aVars' Type: 'Hash' stores all URL parameters ",
        "aLink": "Attribute: 'aLink' Type: 'String' stores the Link before '?' "
    },
    "MethodComment": {
        "init": "init extract the link with parameters from document.location.search and store aLink",
        "parseURL": "parses the URL stores the variables in 'aVar' e.g. ..&lastname=Niehaus&... stores aVars['name']='Niehaus'",
        "getURL": "Comment for getLink",
        "getLink4URL": "get the Link part of the URL without the URL parameters",
        "getParam4URL": "get the parameter string for the URL starting with ? if aVars contains variables",
        "setValue": "sets the value of a link parameter, this is useful\nwhen a parameter for URL are generated from the link parameters\ndefined in LinkParam",
        "getValue": "Comment for getValue(pVar) return the definition of the parameter exists otherwise en empty string",
        "deleteValue": "Comment for deleteValue in the parameter hash aVars\nreturn a Boolean if delete was sucessful, resp. variable pVar exists in Hash aVars",
        "decodeParam": "decode a parameter from the URL",
        "encodeParam": "encode a parameter for a call from the app.",
        "getTableHTML": "creates a HTML table with two column for key and value of the parameter hash aVars",
        "getEditTableHTML": "creates a Edit HTML table with two column for key and value of the parameter hash aVars.\nThe keys of aVars are used as IDs for the HTML form.\nAn optional ID prefix as parameter can be used to create a unique ID for the DOM elements\nAll parameters are visible in an input field.",
        "calcSize": "calculates the number of variables defined in the URL parameters, stores result in length",
        "encodeHTML": "Encodes source code for HTML-Output in as code or textarea in the following way:\n 1) Replace \"&\" character with \"&amp;\"\n 2) Replace \"<\" character with \"&lt;\"\n 3) Replace \">\" character with \"&gt;\"\nThe converted pValue will wrapped with <pre> and <code> tags for direct display as HTML \nand without code tag wrapper if the code is written as inner HTML and value to a textarea.",
        "exists": "checks if the parameter with variable 'pVar' exists in parameter hash this.aVars",
        "param2DOM": "param2DOM(pLinkID,pDOMID) read the Link Parameter of the pLinkID if exists and \n- (html) writes the content to innerHTML (pOutType='html') of DOM node pDOMID or\n- (val) writes the content to the value of the HTML input object with the ID pDOMID  "
    },
    "MethodReturn": {
        "init": "",
        "parseURL": "String",
        "getURL": "String",
        "setValue": "",
        "getValue": "String",
        "deleteValue": "",
        "getLink4URL": "String",
        "getParam4URL": "String",
        "decodeParam": "String",
        "encodeParam": "",
        "getTableHTML": "String",
        "getEditTableHTML": "String",
        "calcSize": "",
        "encodeHTML": "String",
        "exists": "Boolean",
        "param2DOM": ""
    },
    "MethodCode": {
        "init": "//save \"document\" object in aDoc as Attribute for further use \nthis.aDoc = pDoc;\nthis.aLink = pDoc.location;\nthis.aVars = this.parseURL(pDoc.location.search);",
        "parseURL": "var vLink = pLink || \"\";\nvar vParams = {},\n    vTokens,\n    vRE = /[?&]?([^=]+)=([^&]*)/g;\nif (vLink != \"\") {\n  vLink = vLink.split('+').join(' ');\n  while (vTokens = vRE.exec(vLink)) {\n    vParams[this.decodeParam(vTokens[1])] = this.decodeParam(vTokens[2]);\n    this.calcSize();\n  };\n} else {\n    console.log(\"parseURL(pLink) - pLink contains no parameters\")\n};\nreturn vParams;",
        "getURL": "var vParam = \"\";\nif (pVars) {\n    vParam = getParam4URL(pVars);\n} else {\n    vParam = getParam4URL();\n};\nreturn this.getLink4URL() + vParam;",
        "setValue": "if (this.aVars.hasOwnProperty(pVar)) {\n  console.log(\"Value of link parameter '\"+pVar+\"' changed\");\n} else {\n  this.calcSize();\n  console.log(\"New  link parameter '\"+pVar+\"' created\");\n};\nthis.aVars[pVar] = pValue",
        "getValue": "var vRet = \"\";\nif (this.aVars.hasOwnProperty(pVar)) {\n    vRet = this.aVars[pVar]\n} else {\n    console.log(\"ERROR: variable '\"+pVar+\"' does not exist in LinkParam\");\n};\nreturn vRet;",
        "deleteValue": "var vRet = false;\nif (this.aVars.hasOwnProperty(pVar)) {\n    delete this.aVars[pVar];\n    vRet = true;\n    this.calcSize();\n};\nreturn vRet;",
        "getLink4URL": "return this.aLink;",
        "getParam4URL": "  var vHash = this.aVars || {};\n  var vOut = \"\";\n  var vSep = \"?\";\n  for (var iID in vHash) {\n    if (vHash.hasOwnProperty(iID)) {\n      vOut += vSep + this.encodeParam(iID) + \"=\" + this.encodeParam(vHash[iID]);\n      vSep = \"&\";\n    };\n  };\n  return vOut;\n",
        "decodeParam": "pParam = pParam.replace(/\\+/g,  \" \");\npParam = decodeURIComponent(pParam);\nreturn pParam;\n",
        "encodeParam": "var vParam = encodeURIComponent(pParam);\nvParam = vParam.replace(/'/g,\"%27\").replace(/\"/g,\"%22\");\nreturn vParam;",
        "getTableHTML": "var vOut = \"\";\nvar vHash = this.aVars;\nvOut += \"<table border=1>\";\nvOut += \"<tr><td><b>Variable</b></td><td>Value</td></tr>\";\nvar vWrapCode = true;\nfor (var iID in vHash) {\n    if (vHash.hasOwnProperty(iID)) {\n      vOut += \"<tr>\";\n      vOut += \"<td>\";\n      vOut += \"<b>\"+iID+\"</b>\";\n      vOut += \"</td>\";\n      vOut += \"<td>\";\n      // second parameter vWrapCode = true for non textarea use; \n      vOut += this.encodeHTML(vHash[iID],vWrapCode);\n      vOut += \"</td>\";\n      vOut += \"</tr>\";\n    };\n};\nvOut += \"</table>\";\nreturn vOut;",
        "getEditTableHTML": "var vPrefixID = pPredixID || \"\";\nvar vOut = \"\";\nvar vHash = this.aVars;\nvOut += \"<table border=1>\";\nvar vRows = 1;\nvar vContent = \"\";\nvar vMaxRows = 10;\nvar vWrapCode = false;\nfor (var iID in vHash) {\n    if (vHash.hasOwnProperty(iID)) {\n      vContent = this.encodeHTML(vHash[iID],vWrapCode);\n      vRows = (vHash[iID].split(\"\\n\")).length;\n      if (vRows > vMaxRows) {\n          vRows = vMaxRows;\n      };\n      vOut += \"<tr>\";\n      vOut += \"<td>\";\n      vOut += \"<b>\"+iID+\"</b>\";\n      vOut += \"</td>\";\n      vOut += \"<td>\";\n      // second parameter vWrapCode = true for non textarea use; \n      vOut += \"<textarea id='\"+vPrefix+iID+\"'' cols='90' rows='\"+vRows+\"''>\";\n      vOut += vContent;\n      vOut += \"</textarea>\";\n      vOut += \"</td>\";\n      vOut += \"</tr>\";\n    };\n};\nvOut += \"</table>\";\nreturn vOut;",
        "calcSize": "var vRet = 0;\nif (this.aVars) {\n    var vHash = this.aVars;\n    for (var key in vHash) {\n        vRet++;\n    };\n} else {\n    console.log(\"ERROR: variable '\"+pVar+\"' does not exist in LinkParam\");\n};\nreturn vRet;",
        "encodeHTML": "var vValue = pValue || \"\";\nif (vValue != \"\") {\n    vValue = vValue.replace(/</g,\"&lt;\");\n    vValue = vValue.replace(/>/g,\"&gt;\");\n    vValue = vValue.replace(/&/g,\"&amp;\");\n};\nif (pWrapCode && (pWrapCode == true)) {\n    vValue = \"<pre><code>\"+vValue+\"</code></pre>\";\n};\nreturn vValue",
        "exists": "var vRet = false;\nif (pVar) {\n   vRet = this.aVars.hasOwnProperty(pVar)    \n};\nreturn vRet;\n",
        "param2DOM": "var vOutType = pOutType ||Â \"html\";\nif (this.exists(pLinkID)) {\n    var vDOMID = pDOMID || pLinkID; // vDOMID is set by parameter pLinkID otherwise pDOMID == pLinkID;\n    var vOutDOM = document.getElementById(vDOMID);\n    if (vOutDOM) {\n        if (vOutType == \"html\") {\n            vOutDOM.innerHTML = this.getValue(pLinkID);\n        } else {\n            vOutDOM.value = this.getValue(pLinkID);\n        }\n    } else {\n        console.log(\"DOM node [\"+vDOMID+\"] does not exist!\")\n    }\n} else {\n    console.log(\"pLinkID does not exist in param2DOM-call\")\n}\n"
    },
    "MethodParameter": {
        "init": "pDoc:Document",
        "parseURL": "pLink:String",
        "getURL": "pVarHash:Hash",
        "setValue": "pVar:String,pValue:String",
        "getValue": "pVar:String",
        "deleteValue": "pVar:String",
        "getLink4URL": "",
        "getParam4URL": "",
        "decodeParam": "pParam:String",
        "encodeParam": "pParam:String",
        "getTableHTML": "",
        "getEditTableHTML": "pPrefixID:String",
        "calcSize": "",
        "encodeHTML": "pValue:String,pWrapCode:Boolean",
        "exists": "pVar:String",
        "param2DOM": "pLinkID:String,pDOMID:String,pOutType:String"
    },
    "tMethodName": "",
    "AttribAccess": {
        "size": "public",
        "aVars": "public",
        "aLink": "public"
    },
    "MethodAccess": {
        "init": "public",
        "parseURL": "public",
        "getURL": "public",
        "getLink4URL": "public",
        "getParam4URL": "public",
        "setValue": "public",
        "getValue": "public",
        "deleteValue": "public",
        "decodeParam": "public",
        "encodeParam": "public",
        "getTableHTML": "public",
        "getEditTableHTML": "public",
        "calcSize": "public",
        "encodeHTML": "public",
        "exists": "public",
        "param2DOM": "public"
    },
    "tMethodAccess": "public",
    "sClassList": "LinkParam",
    "JSCC_type": "CLASS",
    "JSCC_version": "1"
}